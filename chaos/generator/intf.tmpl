{{- /*gotype: github.com/cockroachdb/field-eng-powertools/chaos/generator.Template*/ -}}
{{- $top := . -}}
// Code generated by "{{ .Cmd }}"; DO NOT EDIT. {{- nl -}}
{{- nl -}}
package {{ .Package.Import }} {{- nl -}}

{{- /* import [foo] "github.com/qqux/foo" */ -}}
{{- range $pkg := .Imports -}}
  {{- if not (eq $pkg $top.Package) -}}
    import {{- sp -}}
    {{- if not $pkg.Simple -}} {{- $pkg.Import -}} {{- sp -}} {{- end -}}
    "{{ $pkg.Path }}" {{- nl -}}
  {{- end -}}
{{- end -}}
{{- nl -}}


{{- range $target := .Targets -}}
  {{- /* func ChaoticInterface(x Interface) Interface { return &chaoticInterfaceImpl{x} }*/ -}}
  func Chaotic{{ $target.Delegate.Short }}(
      engine *{{$top.Chaos.Import }}.Engine,
      delegate {{ $target.Delegate.Qualified }},
    ) {{ $target.Delegate.Qualified }} {
    if !{{ $top.Chaos.Import }}.Enabled() {
      return delegate
    }
    if _, ok := delegate.(*{{ $target.Impl.Short }}); ok {
      return delegate
    }
    return &{{ $target.Impl.Short }}{delegate, engine}
  }
  {{- nl -}}

  {{- /* type chaoticInterfaceImpl struct { delegate Interface } */ -}}
  type {{ $target.Impl.Short }} struct {
    delegate {{ $target.Delegate.Qualified }}
    engine *{{ $top.Chaos.Import }}.Engine
  }
  {{- nl -}}

  {{- /* var _ Interface = (*chaoticInterfaceImpl)(nil) */ -}}
  var _ {{ $target.Delegate.Qualified }} = (*{{- $target.Impl.Short}})(nil)
  {{- nl -}}

  func (x *{{ $target.Impl.Short }}) UnwrapChaos() {{ $target.Delegate.Qualified }} {
    return x.delegate
  }
  {{- nl -}}

  {{- range $m := $target.Methods -}}

  {{- /* func (x *FooChaos) method(arg_name type, arg_name type) (ret0, ret1) { */ -}}
  func (x *{{ $target.Impl.Short }}) {{ $m.Name }}(
  {{- range $argIdx, $arg := $m.Args -}}
  {{- if $argIdx -}}, {{- sp -}} {{- end -}}
  arg_{{- $arg.Name -}} {{- sp -}} {{- $arg.Type.Qualified -}}
  {{- end -}}
  ) (
  {{- range $retIdx, $ret := $m.Rets -}}
    {{- if $retIdx -}}, {{- sp -}} {{- end -}}
    {{- if $ret.Name }} ret_{{- $ret.Name -}} {{- sp -}} {{- end -}}
    {{- $ret.Type.Qualified -}}
  {{- end -}}
  ){ {{- nl -}}

  {{- if $m.ReturnsError -}}
    e := x.engine {{- nl -}}
    {{- if $m.HasContext -}}
      if f, ok := {{ $top.Chaos.Import }}.FromContext(arg_{{ (index $m.Args 0).Name }}); ok {
        e = f
      } {{- nl -}}
    {{- end -}}
    if e != nil {
      if err := e.Chaos(); err != nil { {{- nl -}}
        return {{- sp -}}
        {{- range $retIdx, $ret := $m.Rets -}}
          {{- if $retIdx -}}, {{- sp -}} {{- end -}}
          {{- if eq $retIdx (sub (len $m.Rets) 1) -}}
            err
          {{- else -}}
            *new({{ $ret.Type.Qualified }})
          {{- end -}}
        {{- end -}}
      } {{- nl -}}
    } {{- nl -}}
  {{- end -}}

  {{- /* [return] x.delegate.Method(arg0, arg1) */ -}}
  {{- if gt (len $m.Rets) 0 -}} return {{- sp -}} {{- end -}}
  x.delegate.{{ $m.Name }}(
  {{- range $argIdx, $arg := $m.Args -}}
    {{- if $argIdx -}}, {{- sp -}} {{- end -}}
    arg_{{- $arg.Name -}}
  {{- end -}}
  ) {{- nl -}}

  {{- /* Close the method declaration. */ -}}
  } {{- nl -}}

  {{- end -}} {{- /* method */ -}}
{{- end -}} {{- /* target */ -}}
